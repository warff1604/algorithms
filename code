import random

# Алгоритмы поиска:

# - линейный поиск
# Время работы в наихудшем случае - O(n)
# Время работы в наилучшем случае - O(1)
# Требует ли отсортированного входного массива - Нет


def linear_search(arr, x):
  answer = None
  for i in range(len(arr)):
    if arr[i] == x:
      answer = i
  return answer


def better_linear_search(arr, x):
  answer = None
  for i in range(len(arr)):
    if arr[i] == x:
      answer = i
      return answer


def sentinel_linear_search(arr, x):
  last = arr[-1]
  arr[-1] = x
  counter = 0
  while arr[counter] != x:
    counter += 1
  arr[-1] = last
  if counter < len(arr) - 1 or arr[-1] == x:
    return counter
  else:
    return None


def recursive_linear_search(arr, x, counter=0):
  if counter > len(arr) - 1:
    return None
  if arr[counter] == x:
    return counter
  else:
    counter = recursive_linear_search(arr, x, counter + 1)
    return counter


# - бинарный поиск
# Время работы в наихудшем случае - O(lg n)
# Время работы в наилучшем случае - O(1)
# Требует ли отсортированного входного массива - Да
def binary_search(arr, x):
  begin, end = 0, len(arr) - 1
  while begin <= end:
    center = (begin + end) // 2
    if arr[center] == x:
      return center
    elif arr[center] > x:
      end = center - 1
    else:
      begin = center + 1
  else:
    return None


def recursive_binary_search(arr, begin, end, x):
  if begin > end:
    return None
  else:
    center = (begin + end) // 2
    if arr[center] == x:
      return center
    elif arr[center] > x:
      center = recursive_binary_search(arr, begin, center - 1, x)
      return center
    else:
      center = recursive_binary_search(arr, center + 1, end, x)
      return center


# Алгоритмы сортировки:


# - сортировка выбором
# Время работы в наихудшем случае - O(n2)
# Время работы в наилучшем случае - O(n2)
# Обменов в наихудшем случае - O(n)
# Выполняется ли сортировка на месте - Да
def selection_sort(arr):
  for i in range(len(arr) - 1):
    smallest = i
    for j in range(i + 1, len(arr)):
      if arr[j] < arr[smallest]:
        smallest = j
    arr[smallest], arr[i] = arr[i], arr[smallest]
  return arr


# - сортировка вставкой
# Время работы в наихудшем случае - O(n2)
# Время работы в наилучшем случае - O(n)
# Обменов в наихудшем случае - O(n2)
# Выполняется ли сортировка на месте - Да
def insertion_sort(arr):
  for i in range(1, len(arr)):
    key = arr[i]
    j = i - 1
    while j >= 0 and arr[j] > key:
      arr[j + 1] = arr[j]
      j -= 1
    arr[j + 1] = key
  return arr


# - сортировка слиянием
# Время работы в наихудшем случае - O(nlg n)
# Время работы в наилучшем случае - O(nlg n)
# Обменов в наихудшем случае - O(nlg n)
# Выполняется ли сортировка на месте - Нет
def merge_sort(arr):
  if len(arr) > 1:
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    merge_sort(left)
    merge_sort(right)

    i = j = k = 0

    while i < len(left) and j < len(right):
      if left[i] < right[j]:
        arr[k] = left[i]
        i += 1
      else:
        arr[k] = right[j]
        j += 1
      k += 1

    while i < len(left):
      arr[k] = left[i]
      i += 1
      k += 1

    while j < len(right):
      arr[k] = right[j]
      j += 1
      k += 1

  return arr


# - сортировка быстрая
# Время работы в наихудшем случае - O(n2)
# Время работы в наилучшем случае - O(nlg n)
# Обменов в наихудшем случае - O(n2)
# Выполняется ли сортировка на месте - Да
def quicksort(arr, begin, end):
  if begin >= end:
    return
  else:
    q = partition(arr, begin, end)
    quicksort(arr, begin, q - 1)
    quicksort(arr, q + 1, end)


def partition(arr, begin, end):
  q = begin
  for u in range(begin + 1, end + 1):
    if arr[u] <= arr[begin]:
      q += 1
      arr[u], arr[q] = arr[q], arr[u]

  arr[q], arr[begin] = arr[begin], arr[q]
  return q


def really_simple_sort(arr):
  counter = 0
  for i in range(len(arr)):
    if arr[i] == 1:
      counter += 1
  arr[:counter] = [1] * counter
  arr[counter:] = [2] * (len(arr) - counter)
  return arr


def counting_sort(arr):
  equal = [0] * (max(arr) + 1)
  for i in range(len(arr)):
    key = arr[i]
    equal[key] += 1

  less = [0] * len(equal)
  for i in range(1, len(equal)):
    less[i] = equal[i - 1] + less[i - 1]

  result = [0] * len(arr)
  for i in range(len(arr)):
    key = arr[i]
    index = less[key]
    result[index] = arr[i]
    less[key] += 1
  return result


# Топологическая сортировка
from collections import defaultdict


class graph:

  def __init__(self, vertices):
    self.adjacencyList = defaultdict(list)  # список смежности
    self.Vertices = vertices

  def createEdge(self, u, v):
    self.adjacencyList[u].append(v)

  def topologicalSort(self):
    in_degree = [0] * self.Vertices

    for i in self.adjacencyList:
      for j in self.adjacencyList[i]:
        in_degree[j] += 1

    next = []
    for i in range(self.Vertices):
      if in_degree[i] == 0:
        next.append(i)

    visited_node = 0
    sorted_list = []

    while next:
      u = next.pop(0)
      sorted_list.append(u)
      for i in self.adjacencyList[u]:
        in_degree[i] -= 1
        if in_degree[i] == 0:
          next.append(i)

      visited_node += 1

    if visited_node != self.Vertices:
      return 'Граф не является ациклическим!'
    else:
      return sorted_list


num = 10
random.seed(12345)
some_list = [random.randint(0, 9) for _ in range(num)]

# some_list = [4, 1, 5, 0, 1, 6, 5, 1, 5, 3]
# some_list = [4, 1, 5, 0, 1, 6, 5, 1, 5, 3]
# print(some_list)

# some_list = list(range(10))
# some_list = [1, 3, 4, 7, 8, 11, 12, 13, 15, 20]
# print(binary_search(some_list, 15))
# print(recursive_binary_search(some_list, 0, len(some_list) - 1, 15))
# print(selection_sort(some_list))
# print(insertion_sort(some_list))
# print(merge_sort(some_list))
# quicksort(some_list, 0, len(some_list) - 1)
# print(some_list)
# print(really_simple_sort([2, 2, 1, 2, 1, 2, 1]))
# print(count_keys_equal(some_list))
# print(count_keys_less(count_keys_equal(some_list)))
# print(counting_sort(some_list))

G = graph(6)
G.createEdge(0, 1)
G.createEdge(0, 2)
G.createEdge(1, 3)
G.createEdge(1, 5)
G.createEdge(2, 3)
G.createEdge(2, 5)
G.createEdge(3, 4)
G.createEdge(5, 4)
print(G.topologicalSort())
